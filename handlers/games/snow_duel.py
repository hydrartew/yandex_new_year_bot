import asyncio

from aiogram import F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from icecream import ic

from db.db_redis import SnowDuelDBQueries
from filters import GroupChat
from handlers import dp
from schemas import WhoMoves, SnowDuelRoom


def hud(_data: SnowDuelRoom):
    return (
        '<blockquote>‚ùÑÔ∏èüî´ –°–Ω–µ–∂–Ω–∞—è –¥—É—ç–ª—å</blockquote>\n'
        f'–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {_data.distance} —à–∞–≥–æ–≤\n\n'
        f'–†–∞—É–Ω–¥: {_data.current_round}\n\n'
        f'@{_data.owner.tg_username}: {'‚ù§Ô∏è‚ù§Ô∏è'.replace('‚ù§Ô∏è', 'üíî', _data.opponent.points)}\n'
        f'@{_data.opponent.tg_username}: {'‚ù§Ô∏è‚ù§Ô∏è'.replace('‚ù§Ô∏è', 'üíî', _data.owner.points)}\n\n'
    )


class SnowDuelState(StatesGroup):
    is_owner = State()
    is_opponent = State()


@dp.message(Command('snow_duel'), GroupChat())
async def game_snow_duel(message: Message, state: FSMContext) -> None:
    # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ reply
    if message.reply_to_message is None:
        await message.reply(f'–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Å–Ω–µ–∂–Ω–æ–π –¥—É—ç–ª–∏ ‚ùÑÔ∏èüî´ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞, '
                            f'–æ—Ç–ø—Ä–∞–≤—å /snow_duel –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞')
        return

    # –µ—Å–ª–∏ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    if message.reply_to_message.from_user.is_bot:
        await message.reply('–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–Ω–µ–∂–Ω–æ–π –¥—É—ç–ª–∏ ‚ùÑÔ∏èüî´, –≤—ã–±–µ—Ä–∏ —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–æ–≥–æ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞')
        return

    # –µ—Å–ª–∏ reply –Ω–∞ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.from_user.username == message.reply_to_message.from_user.username:
        await message.answer('–¢—ã –Ω–µ –º–æ–∂–µ—à—å –≤—ã–∑–≤–∞—Ç—å –Ω–∞ —Å–Ω–µ–∂–Ω—É—é –¥—É—ç–ª—å ‚ùÑÔ∏èüî´ —Å–∞–º–æ–≥–æ —Å–µ–±—è, –≤—ã–±–µ—Ä–∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞')
        return

    await state.set_state(SnowDuelState.is_owner)

    send_message = await message.answer(
        text=f'@{message.from_user.username} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å—Ä–∞–∑–∏—Ç—å—Å—è –≤ —Å–Ω–µ–∂–Ω–æ–π –¥—É—ç–ª–∏ ‚ùÑÔ∏èüî´',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
            text='–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤', callback_data='start_snow_duel')]])
    )

    await SnowDuelDBQueries(
        chat_id=message.chat.id,
        message_id=send_message.message_id
    ).create_room(
        owner_tg_user_id=message.from_user.id,
        owner_tg_tg_username=message.from_user.username,
        distance=25,  # TODO: –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–Ω–¥–æ–º –∫–æ–Ω—Ñ–∏–≥
        who_moves=WhoMoves.owner  # TODO: –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–Ω–¥–æ–º –∫–æ–Ω—Ñ–∏–≥
    )


@dp.callback_query(F.data == 'start_snow_duel')
async def game_snow_duel_call(call: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()

    if current_state == 'SnowDuelState:is_owner':
        await call.answer(
            '–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–∏–Ω—è—Ç—å —Å–≤–æ–π –∂–µ –≤—ã–∑–æ–≤. –ñ–¥–µ–º –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞...',
            show_alert=True,
            cache_time=20
        )
        return

    if current_state == 'SnowDuelState:is_opponent':
        await call.answer(
            '–£ —Ç–µ–±—è –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –¥—É—ç–ª—å, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å –µ—ë, –Ω–∞–ø–∏—à–∏ /cancel_snow_duel',
            show_alert=True,
            cache_time=3
        )
        return

    await state.set_state(SnowDuelState.is_opponent)

    _data = await SnowDuelDBQueries(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id
    ).add_opponent_to_room(
        opponent_tg_user_id=call.from_user.id,
        opponent_tg_tg_username=call.from_user.username
    )

    if not _data.room_exists:
        await call.answer('–î—É—ç–ª—å —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', show_alert=True, cache_time=120)
        return

    if _data.room_already_has_opponent:
        await call.answer('–¢—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —ç—Ç–æ–π –¥—ç—É–ª–∏', show_alert=True, cache_time=120)
        return

    if _data.user_is_owner_already_in_room:
        await call.answer('–¢—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —ç—Ç–æ–π –¥—É—ç–ª–∏', show_alert=True, cache_time=20)
        return

    if _data.snow_duel_data.who_moves == WhoMoves.owner:
        who_throw = _data.snow_duel_data.owner.tg_username
        who_get = _data.snow_duel_data.opponent.tg_username
    else:
        who_throw = _data.snow_duel_data.opponent.tg_username
        who_get = _data.snow_duel_data.owner.tg_username

    await call.message.edit_text(
        text=hud(_data.snow_duel_data) + f'üîõ @{who_throw} - –±—Ä–æ—Å–∞–µ—Ç',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
            text=f'–ë—Ä–æ—Å–∏—Ç—å ‚ùÑÔ∏è –≤ @{who_get}', callback_data='throw_snowball')]])
    )


@dp.callback_query(SnowDuelState.is_opponent)
@dp.callback_query(F.data == 'throw_snowball', SnowDuelState.is_owner)
async def game_snow_duel_throw(call: CallbackQuery):
    is_hit = True  # TODO: –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–Ω–¥–æ–º –∫–æ–Ω—Ñ–∏–≥

    _data = await SnowDuelDBQueries(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id
    ).make_move(
        tg_user_id=call.from_user.id,
        is_hit=is_hit
    )

    if not _data.user_in_room:
        await call.answer('–¢—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —ç—Ç–æ–π –¥—ç—É–ª–∏', show_alert=True, cache_time=120)
        return

    if not _data.is_current_user_move:
        await call.answer('–°–µ–π—á–∞—Å –Ω–µ —Ç–≤–æ–π –±—Ä–æ—Å–æ–∫', show_alert=True, cache_time=10)
        return

    if not _data.room_exists:
        await call.answer('–î—É—ç–ª—å —É–∂–µ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', show_alert=True, cache_time=120)
        return

    footer = f'üîõ @{call.from_user.username} - –º–∏–º–æ üí®'
    if is_hit:
        footer = f'üîõ @{call.from_user.username} - –ø–æ–ø–∞–ª(–∞) üéØ'

    await call.message.edit_text(hud(_data.snow_duel_data) + footer)
    await asyncio.sleep(3)

    if _data.snow_duel_data.who_moves == WhoMoves.owner:
        who_throw = _data.snow_duel_data.owner.tg_username
        who_get = _data.snow_duel_data.opponent.tg_username
    else:
        who_throw = _data.snow_duel_data.opponent.tg_username
        who_get = _data.snow_duel_data.owner.tg_username

    await call.message.edit_text(
        text=hud(_data.snow_duel_data) + f'üîõ @{who_throw} - –±—Ä–æ—Å–∞–µ—Ç',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
            text=f'–ë—Ä–æ—Å–∏—Ç—å ‚ùÑÔ∏è –≤ @{who_get}', callback_data='throw_snowball')]])
    )


@dp.message(Command("cancel_snow_duel"))
@dp.message(F.text.casefold() == "cancel_snow_duel")
async def cancel_handler(message: Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        await message.reply('–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π')
        return

    await state.clear()
    await message.answer("Cancelling state {}".format(current_state))
