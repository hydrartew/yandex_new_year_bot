from aiogram.filters import Command
from aiogram.types import Message

from random import randint

from db.db_redis import update_snowman
from filters import GroupChat
from handlers import dp


@dp.message(Command('snowman'), GroupChat())
async def game_snowman(message: Message) -> None:
    list_text = message.text.split()
    if len(list_text) != 2 or not list_text[1].isdigit() or int(list_text[1]) > 10 or int(list_text[1]) < 1:
        await message.reply(
            '–£–∫–∞–∂–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10, –Ω–∞ —Å–∫–æ–ª—å–∫–æ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤ –Ω—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–æ—Å—Ç —Å–Ω–µ–≥–æ–≤–∏—á–∫–∞ ‚òÉÔ∏è\n\n'
            '–ü—Ä–∏–º–µ—Ä: <code>/snowman 8</code>\n\n'
            '–ß–µ–º –±–æ–ª—å—à–µ —á–∏—Å–ª–æ, —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å, —á—Ç–æ —Å–Ω–µ–≥–æ–≤–∏—á–æ–∫ ‚òÉÔ∏è —É–ø–∞–¥–µ—Ç'
        )
        return

    height_increased = int(list_text[1])
    snowman_fall = SnowmanFallingChances(height_increased)

    text = f'@{message.from_user.username} —É–≤–µ–ª–∏—á–∏–ª(–∞) —Ä–æ—Å—Ç —Å–Ω–µ–≥–æ–≤–∏—á–∫–∞ ‚òÉÔ∏è –Ω–∞ {height_increased} —Å–º'
    if snowman_fall.is_fall:
        await message.answer(text=text + f', –∏ –æ–Ω —É–ø–∞–ª ü´† '
                                         f'(—à–∞–Ω—Å –ø–∞–¥–µ–Ω–∏—è: {snowman_fall.percentage_falling_chance})')
        await update_snowman(message.from_user.id, -1)
        return

    snowman = await update_snowman(message.from_user.id, height_increased)
    await message.answer(text=text + f'\n–¢–µ–∫—É—â–∏–π —Ä–æ—Å—Ç: {snowman.current} —Å–º')


class SnowmanFallingChances:
    def __init__(self, height_increased: int):
        """
        –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —à–∞–Ω—Å–æ–≤ –ø–∞–¥–µ–Ω–∏—è —Å–Ω–µ–≥–æ–≤–∏–∫–∞ –¥–ª—è –∏–≥—Ä—ã snowman

        :param height_increased: –Ω–∞ —Å–∫–æ–ª—å–∫–æ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤ –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–µ–Ω —Ä–æ—Å—Ç —Å–Ω–µ–≥–æ–≤–∏–∫–∞
        """
        self.height_increased = height_increased
        self.config = [
            {
                'height_increased': 1,
                'percentage_falling_chance': '2%'
            },
            {
                'height_increased': 2,
                'percentage_falling_chance': '4%'
            },
            {
                'height_increased': 3,
                'percentage_falling_chance': '6%'
            },
            {
                'height_increased': 4,
                'percentage_falling_chance': '8%'
            },
            {
                'height_increased': 5,
                'percentage_falling_chance': '10%'
            },
            {
                'height_increased': 6,
                'percentage_falling_chance': '12%'
            },
            {
                'height_increased': 7,
                'percentage_falling_chance': '14%'
            },
            {
                'height_increased': 8,
                'percentage_falling_chance': '16%'
            },
            {
                'height_increased': 9,
                'percentage_falling_chance': '18%'
            },
            {
                'height_increased': 10,
                'percentage_falling_chance': '20%'
            }
        ]

    @property
    def is_fall(self):
        return randint(1, 100) <= int(self.percentage_falling_chance[:-1])

    @property
    def percentage_falling_chance(self):
        return self.config[self.height_increased - 1].get('percentage_falling_chance')
